/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Role struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RoleSpec   `json:"spec,omitempty"`
	Status            RoleStatus `json:"status,omitempty"`
}

type RoleSpecPermissions struct {
	// Specific action users granted with the role will be allowed to perform (for example: `users:read`)
	Action *string `json:"action" tf:"action"`
	// Scope to restrict the action to a set of resources (for example: `users:*` or `roles:customrole1`)
	// +optional
	Scope *string `json:"scope,omitempty" tf:"scope"`
}

type RoleSpec struct {
	State *RoleSpecResource `json:"state,omitempty" tf:"-"`

	Resource RoleSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type RoleSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Description of the role.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Boolean to state whether the role is available across all organizations or not.
	// +optional
	Global *bool `json:"global,omitempty" tf:"global"`
	// Name of the role
	Name *string `json:"name" tf:"name"`
	// Specific set of actions granted by the role.
	// +optional
	Permissions []RoleSpecPermissions `json:"permissions,omitempty" tf:"permissions"`
	// Unique identifier of the role. Used for assignments.
	// +optional
	Uid *string `json:"uid,omitempty" tf:"uid"`
	// Version of the role. A role is updated only on version increase.
	Version *int64 `json:"version" tf:"version"`
}

type RoleStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// RoleList is a list of Roles
type RoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Role CRD objects
	Items []Role `json:"items,omitempty"`
}
