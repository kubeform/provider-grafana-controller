/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type LearningJob struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LearningJobSpec   `json:"spec,omitempty"`
	Status            LearningJobStatus `json:"status,omitempty"`
}

type LearningJobSpec struct {
	State *LearningJobSpecResource `json:"state,omitempty" tf:"-"`

	Resource LearningJobSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type LearningJobSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The id of the datasource to query.
	DatasourceID *int64 `json:"datasourceID" tf:"datasource_id"`
	// The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.
	DatasourceType *string `json:"datasourceType" tf:"datasource_type"`
	// A description of the job.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// The hyperparameters used to fine tune the algorithm. See https://grafana.com/docs/grafana-cloud/machine-learning/models/ for the full list of available hyperparameters.
	// +optional
	HyperParams map[string]string `json:"hyperParams,omitempty" tf:"hyper_params"`
	// The data interval in seconds to train the data on.
	// +optional
	Interval *int64 `json:"interval,omitempty" tf:"interval"`
	// The metric used to query the job results.
	Metric *string `json:"metric" tf:"metric"`
	// The name of the job.
	Name *string `json:"name" tf:"name"`
	// An object representing the query params to query Grafana with.
	QueryParams map[string]string `json:"queryParams" tf:"query_params"`
	// The data interval in seconds to train the data on.
	// +optional
	TrainingWindow *int64 `json:"trainingWindow,omitempty" tf:"training_window"`
}

type LearningJobStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// LearningJobList is a list of LearningJobs
type LearningJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of LearningJob CRD objects
	Items []LearningJob `json:"items,omitempty"`
}
