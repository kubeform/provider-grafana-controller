/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Panel struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PanelSpec   `json:"spec,omitempty"`
	Status            PanelStatus `json:"status,omitempty"`
}

type PanelSpec struct {
	State *PanelSpecResource `json:"state,omitempty" tf:"-"`

	Resource PanelSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type PanelSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Timestamp when the library panel was created.
	// +optional
	Created *string `json:"created,omitempty" tf:"created"`
	// Numerical IDs of Grafana dashboards containing the library panel.
	// +optional
	DashboardIDS []int64 `json:"dashboardIDS,omitempty" tf:"dashboard_ids"`
	// Description of the library panel.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// ID of the folder where the library panel is stored.
	// +optional
	FolderID *int64 `json:"folderID,omitempty" tf:"folder_id"`
	// Name of the folder containing the library panel.
	// +optional
	FolderName *string `json:"folderName,omitempty" tf:"folder_name"`
	// Unique ID (UID) of the folder containing the library panel.
	// +optional
	FolderUid *string `json:"folderUid,omitempty" tf:"folder_uid"`
	// The JSON model for the library panel.
	ModelJSON *string `json:"modelJSON" tf:"model_json"`
	// Name of the library panel.
	Name *string `json:"name" tf:"name"`
	// The numeric ID of the library panel computed by Grafana.
	// +optional
	OrgID *int64 `json:"orgID,omitempty" tf:"org_id"`
	// The numeric ID of the library panel computed by Grafana.
	// +optional
	PanelID *int64 `json:"panelID,omitempty" tf:"panel_id"`
	// Type of the library panel (eg. text).
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
	// The unique identifier (UID) of a library panel uniquely identifies library panels between multiple Grafana installs. Itâ€™s automatically generated unless you specify it during library panel creation.The UID provides consistent URLs for accessing library panels and when syncing library panels between multiple Grafana installs.
	// +optional
	Uid *string `json:"uid,omitempty" tf:"uid"`
	// Timestamp when the library panel was last modified.
	// +optional
	Updated *string `json:"updated,omitempty" tf:"updated"`
	// Version of the library panel.
	// +optional
	Version *int64 `json:"version,omitempty" tf:"version"`
}

type PanelStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// PanelList is a list of Panels
type PanelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Panel CRD objects
	Items []Panel `json:"items,omitempty"`
}
